{% extends 'base.html.twig' %}

{% block title %}Accueil - GameStore{% endblock %}

{% block body %}
<div class="container py-5">
    <div class="row mb-5">
        <div class="col text-center">
            <h1 class="display-4">Bienvenue sur <span class="text-primary">GameStore</span></h1>
            <p class="lead">Découvrez, achetez et téléchargez les meilleurs jeux vidéo, consoles, accessoires et abonnements !</p>
        </div>
    </div>

    <div class="mb-4 text-center">
        <div class="btn-group mb-3" role="group" aria-label="Catégories">
            <button type="button" class="btn btn-outline-primary active" data-filter="all">Tous</button>
            <button type="button" class="btn btn-outline-primary" data-filter="jeu">Jeux</button>
            <button type="button" class="btn btn-outline-primary" data-filter="console">Consoles</button>
            <button type="button" class="btn btn-outline-primary" data-filter="accessoire">Accessoires</button>
            <button type="button" class="btn btn-outline-primary" data-filter="abonnement">Abonnements</button>
        </div>
        <input type="text" id="search-bar" class="form-control w-50 mx-auto" placeholder="Rechercher un produit par nom...">
    </div>

    <div class="row row-cols-1 row-cols-md-3 g-4" id="products-list">
        {% for product in products %}
            <div class="col product-card" data-category="{{ product.category ? product.category|lower : 'autre' }}">
                <div class="card h-100 shadow-sm">
                    <img src="{{ product.image ?: 'https://via.placeholder.com/400x200?text=Image' }}" class="card-img-top" alt="{{ product.name }}" style="height:200px;width:100%;object-fit:cover;">
                    <div class="card-body">
                        <h5 class="card-title">{{ product.name }}</h5>
                        <p class="card-text text-secondary small" style="min-height:48px;">
                            {{ product.description|default('Aucune description') }}
                        </p>
                        <p class="mb-1">
                            <span class="badge bg-info">{{ product.category|default('Autre') }}</span>
                        </p>
                    </div>
                    <div class="card-footer d-flex justify-content-between align-items-center">
                        <span class="fw-bold text-primary">{{ product.price }} DT</span>
                        {% if product.stock > 0 %}
                            <a href="#" class="btn btn-success add-to-cart"
                               data-title="{{ product.name }}"
                               data-price="{{ product.price }}"
                               data-id="{{ product.id }}"
                               data-stock="{{ product.stock }}">
                                Ajouter au panier
                            </a>
                        {% else %}
                            <span class="badge bg-danger">Rupture de stock</span>
                        {% endif %}
                    </div>
                </div>
            </div>
        {% else %}
            <div class="col">
                <div class="alert alert-info">Aucun produit disponible.</div>
            </div>
        {% endfor %}
    </div>
</div>

{% if not is_granted('ROLE_ADMIN') %}
<!-- Panier -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="cartSidebar" aria-labelledby="cartSidebarLabel">
    <div class="offcanvas-header">
        <h5 id="cartSidebarLabel">Mon panier</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
    </div>
    <div class="offcanvas-body">
        <ul id="cart-list" class="list-group mb-3"></ul>
        <div class="mb-3">
            <strong>Total : <span id="cart-total">0</span> DT</strong>
        </div>
        <form id="checkout-form" style="display:none;">
            <div class="mb-3">
                <label for="address" class="form-label">Adresse de livraison</label>
                <input type="text" class="form-control" id="address" required>
            </div>
            <div class="mb-3">
                <label class="form-label">Mode de paiement</label>
                <select class="form-select" id="payment-method" required>
                    <option value="cod">Paiement à la livraison</option>
                    <option value="card">Carte bancaire</option>
                </select>
            </div>

            <div id="stripe-card-element" class="mb-3" style="display:none;">
                <label for="card-element" class="form-label">Carte bancaire</label>
                <div id="card-element"></div>
                <div id="card-errors" class="text-danger mt-2"></div>
            </div>
            <button type="submit" class="btn btn-primary w-100">Finaliser la commande</button>
        </form>
        <div id="order-success" class="alert alert-success mt-3 d-none">
            Commande validée ! Merci pour votre achat.
        </div>
    </div>
</div>
<!-- Bouton panier flottant -->
<button type="button" class="btn btn-warning position-fixed" style="bottom:30px;right:30px;z-index:1050;" data-bs-toggle="offcanvas" data-bs-target="#cartSidebar">
    <i class="bi bi-cart"></i> Panier <span id="cart-count" class="badge bg-danger">0</span>
</button>
{% endif %}
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://js.stripe.com/v3/"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const filterButtons = document.querySelectorAll('[data-filter]');
        const productCards = document.querySelectorAll('.product-card');
        const searchBar = document.getElementById('search-bar');

        // Filtrage par catégorie
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                const filterValue = this.getAttribute('data-filter');
                productCards.forEach(card => {
                    if ((filterValue === 'all' || card.getAttribute('data-category') === filterValue) &&
                        card.querySelector('.card-title').textContent.toLowerCase().includes(searchBar.value.toLowerCase())
                    ) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
        });

        // Filtrage par recherche
        searchBar.addEventListener('input', function() {
            const searchValue = this.value.toLowerCase();
            const activeFilter = document.querySelector('[data-filter].active').getAttribute('data-filter');
            productCards.forEach(card => {
                const matchCategory = (activeFilter === 'all' || card.getAttribute('data-category') === activeFilter);
                const matchName = card.querySelector('.card-title').textContent.toLowerCase().includes(searchValue);
                card.style.display = (matchCategory && matchName) ? 'block' : 'none';
            });
        });

        // PANIER
        let cart = JSON.parse(localStorage.getItem('cart') || '[]');
        const cartList = document.getElementById('cart-list');
        const cartTotal = document.getElementById('cart-total');
        const cartCount = document.getElementById('cart-count');
        const checkoutForm = document.getElementById('checkout-form');
        const orderSuccess = document.getElementById('order-success');

        function updateCartDisplay() {
            cartList.innerHTML = '';
            let total = 0;
            cart.forEach((item, idx) => {
                total += item.price * item.quantity;
                const li = document.createElement('li');
                li.className = 'list-group-item d-flex justify-content-between align-items-center';
                li.innerHTML = `
                    ${item.title}
                    <div class="d-inline-block ms-2">
                        <button class="btn btn-sm btn-outline-secondary decrease-qty" data-idx="${idx}">-</button>
                        <span class="mx-2">${item.quantity}</span>
                        <button class="btn btn-sm btn-outline-secondary increase-qty" data-idx="${idx}">+</button>
                    </div>
                    <span>${item.price * item.quantity} DT</span>
                    <button class="btn btn-sm btn-danger remove-item ms-2" data-idx="${idx}">&times;</button>
                `;
                cartList.appendChild(li);
            });
            cartTotal.textContent = total;
            cartCount.textContent = cart.length;
            checkoutForm.style.display = cart.length ? 'block' : 'none';
        }

        // Ajouter au panier
        document.querySelectorAll('.add-to-cart').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const existingItem = cart.find(item => item.title === this.dataset.title);
                if (existingItem) {
                    existingItem.quantity++;
                } else {
                    cart.push({
                        title: this.dataset.title,
                        price: parseFloat(this.dataset.price),
                        quantity: 1
                    });
                }
                localStorage.setItem('cart', JSON.stringify(cart));
                updateCartDisplay();
            });
        });

        // Afficher le panier à l'ouverture
        document.getElementById('cartSidebar').addEventListener('show.bs.offcanvas', updateCartDisplay);

        // Retirer un article
        cartList.addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-item')) {
                cart.splice(e.target.dataset.idx, 1);
                localStorage.setItem('cart', JSON.stringify(cart));
                updateCartDisplay();
            }
            if (e.target.classList.contains('increase-qty')) {
                cart[e.target.dataset.idx].quantity++;
                localStorage.setItem('cart', JSON.stringify(cart));
                updateCartDisplay();
            }
            if (e.target.classList.contains('decrease-qty')) {
                if (cart[e.target.dataset.idx].quantity > 1) {
                    cart[e.target.dataset.idx].quantity--;
                } else {
                    cart.splice(e.target.dataset.idx, 1);
                }
                localStorage.setItem('cart', JSON.stringify(cart));
                updateCartDisplay();
            }
        });

        // Finaliser la commande
        checkoutForm.addEventListener('submit', async function(e) {
            const paymentMethod = document.getElementById('payment-method').value;
            const total = parseFloat(document.getElementById('cart-total').textContent);
            const adresse = document.getElementById('address').value;

            if (paymentMethod === 'card') {
                e.preventDefault();

                const {paymentMethod: stripePaymentMethod, error} = await stripe.createPaymentMethod({
                    type: 'card',
                    card: card,
                });

                if (error) {
                    document.getElementById('card-errors').textContent = error.message;
                    return;
                }

                fetch('/commander', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: new URLSearchParams({
                        produits: JSON.stringify(cart),
                        total: total,
                        adresse: adresse,
                        paiement: 'card',
                        paymentMethodId: stripePaymentMethod.id
                    })
                }).then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        cart = [];
                        localStorage.setItem('cart', JSON.stringify(cart));
                        updateCartDisplay();
                        orderSuccess.classList.remove('d-none');
                        setTimeout(() => orderSuccess.classList.add('d-none'), 4000);
                        checkoutForm.reset();
                    }
                });
            } else if (paymentMethod === 'cod') {
                // Paiement à la livraison : envoie la commande normalement
                // Laisse le submit se faire, le formulaire sera traité côté PHP
                // MAIS comme tu utilises JS, il faut envoyer en AJAX aussi :
                e.preventDefault();
                fetch('/commander', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: new URLSearchParams({
                        produits: JSON.stringify(cart),
                        total: total,
                        adresse: adresse,
                        paiement: 'cod'
                    })
                }).then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        cart = [];
                        localStorage.setItem('cart', JSON.stringify(cart));
                        updateCartDisplay();
                        orderSuccess.classList.remove('d-none');
                        setTimeout(() => orderSuccess.classList.add('d-none'), 4000);
                        checkoutForm.reset();
                    }
                });
            }
        });

        // Afficher Stripe Card Element si paiement par carte
        document.getElementById('payment-method').addEventListener('change', function() {
            if (this.value === 'card') {
                document.getElementById('stripe-card-element').style.display = 'block';
                if (!stripeFormReady) {
                    stripe = Stripe('pk strip'); // Mets ta clé publique Stripe ici
                    const elements = stripe.elements();
                    card = elements.create('card');
                    card.mount('#card-element');
                    stripeFormReady = true;
                }
            } else {
                document.getElementById('stripe-card-element').style.display = 'none';
            }
        });
    });
</script>
<script>
    window.isUserLoggedIn = {{ app.user ? 'true' : 'false' }};
</script>
{% endblock %}